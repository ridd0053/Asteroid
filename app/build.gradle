apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'
apply plugin: 'jacoco'

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.2'

    defaultConfig {
        applicationId "james.asteroid"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 21
        versionName "1.3"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            testCoverageEnabled = true
        }

    }
    project.gradle.taskGraph.whenReady {
        connectedDebugAndroidTest {
            ignoreFailures = true
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    def isRunningOnTravis = System.getenv("CI") == "true"
    if (isRunningOnTravis) {
        signingConfigs.release.storeFile = file("../key.jks")
        signingConfigs.release.storePassword = System.getenv("KEYSTORE_PASSWORD")
        signingConfigs.release.keyAlias = System.getenv("KEYSTORE_ALIAS")
        signingConfigs.release.keyPassword = System.getenv("KEYSTORE_ALIAS_PASSWORD")
    }
}

play {
    serviceAccountCredentials = file("../service.json")
    track = "alpha"
}

task printVersionName {
    doLast {
        println android.defaultConfig.versionName
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':BaseGameUtils')

    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.core:core:1.5.0-alpha04'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'

    implementation 'com.google.android.gms:play-services-games:11.4.2' //11.6.0, 15.0.0, 16.0.0

    testImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'junit:junit:4.13.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    testImplementation 'com.google.truth:truth:1.1'
    androidTestImplementation 'com.google.truth:truth:1.1'
}
jacoco {
    version '0.8.5'
}



task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    def execData = subprojects.collect { files("${it.buildDir}/jacoco/testDebugUnitTest.exec") }
    executionData execData

    reports {
        xml.enabled = true
        html.enabled = true
    }
    def fileFilter = ['**/R.class',
                      '**/R$*.class',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/data/models/*']
    def debugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"


     sourceDirectories.from = files([mainSrc])
     classDirectories.from = files([debugTree])
    executionData.from = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])


}




